openapi: 3.0.0
info:
  description: Frontend API that communicates between the Vue SPA and the Webserver backend.
  version: "0.0.5"
  title: DDD Frontend API
  contact:
    email: josephs@jtstechnic.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://virtserver.swaggerhub.com/jts/DDDFrontend/1.0.0'
    description: Autogenerated Server
  - url: 'http://ddd.io:1025'
    description: Temporary local server (1025 port)
tags:
  - name: Proposals
    description: Proposal related calls
  - name: Users
    description: User related calls
  - name: Servers
    description: Server related calls
  - name: Authentication
    description: Authentication related calls
paths:
  /proposals/{id}:
    get:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Get a proposal.
      description: >
        Get's specific proposal.  Will only return a proposal if the logged in user belongs to the proposal's server.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '404':
          description: A Proposal with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be a 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
    put:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Update a proposal.
      description: >
        Update's a proposal's properties.  This will reset the expiration date and the vote count.  Can only be done by the proposal owner.
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '404':
          description: A Proposal with specified ID could not be found.
        '400':
          description: Malformed ID or Proposal format.  ID must be a 64-bit integer.  Refer to documentation.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
    delete:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Delete a proposal.
      description: >
        Delete's a proposal.  Can only be done by the proposal owner.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '404':
          description: A Proposal with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be a 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /proposals/{id}/author:
    get:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Get a proposal's author's user object
      description: >
        Get the user object for a proposal's author.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: A Proposal with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /proposals/{id}/server:
    get:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Get a proposal's server's server object
      description: >
        Get the server object for a proposal's server.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          description: A Proposal with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /proposals:
    get:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Get a list of proposals.
      description: >
        Return a list of proposals that match the query.  Only returns proposals that belong to one or more of the user's servers.
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'
        '400':
          description: Malformed query string.  Refer to documentation.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
    post:
      security:
        - bearer: []
      tags:
        - Proposals
      summary: Add a new proposal.
      description: >
        Submit a new proposal.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
      responses:
        '201':
          description: Successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
        '400':
          description: Malformed proposal.  Refer to documentation.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /servers/{id}:
    get:
      security:
        - bearer: []
      tags:
        - Servers
      summary: Get a server.
      description: >
        Get a specific server's config info.  Will only return the server if the user belongs to that server.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          description: A Server with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
    put:
      security:
        - bearer: []
      tags:
        - Servers
      summary: Update a server's settings.
      description: >
        Update a server's settings.  Can only be done by the server's owner.
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Server'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          description: A Server with specified ID could not be found.
        '400':
          description: Malformed ID or Server Configuration.  ID must be 64-bit integer.  Refer to documentation.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /servers/{id}/members:
    get:
      security:
        - bearer: []
      tags:
        - Servers
      summary: Get a server's members.
      description: >
        Get all the members of a server
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: A Server with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /servers/{id}/proposals:
    get:
      security:
        - bearer: []
      tags:
        - Servers
      summary: Get a server's proposals.
      description: >
        Get a server's proposals.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'
        '404':
          description: A Server with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /users/{id}:
    get:
      security:
        - bearer: []
      tags:
        - Users
      summary: Get a user.
      description: >
        Get a specific user.  The user **must** be in a mutual server with the logged in user.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: A User with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /users/{id}/servers:
    get:
      security:
        - bearer: []
      tags:
        - Users
      summary: Get a user's servers.
      description: >
        An array of Server objects.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
        '404':
          description: A User with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /users/{id}/proposals:
    get:
      security:
        - bearer: []
      tags:
        - Users
      summary: Get a user's proposals.
      description: >
        An array of Proposal objects.
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'
        '404':
          description: A User with specified ID could not be found.
        '400':
          description: Malformed ID.  ID must be 64-bit integer.
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /auth/token:
    post:
      tags:
        - Authentication
      summary: Submit Authentication code for tokens.
      description: >
        This endpoint mostly forwards on the Auth code and relays back discord's response.
      responses:
        '200':
          description: OK.  Logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Submit refresh token for tokens.
      description: >
        This endpoint mostly forwards on the refresh code and relays back discord's response.
      responses:
        '200':
          description: OK. Logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          $ref: '#/components/schemas/401'
        '500':
          $ref: '#/components/schemas/500'
components:
  parameters:
    id:
      name: id
      in: path
      description: A Discord/Twitter snowflake-style ID.
      example: 530199570009948190
      required: true
      schema:
        type: integer
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
  schemas:
    '500':
      description: Internal server error.
    '401':
      description: Authorization invalid.
    Proposal:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        author:
          type: string
        createdOn:
          type: string
        expiresOn:
          type: string
        server:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        status:
          type: integer
          minimum: -1
          maximum: 1
        votes:
          type: array
          items:
            type: integer
          minItems: 2
          maxItems: 2
    Server:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        icon_hash:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        avatar_hash:
          type: string
    Action:
      type: object
      properties:
        position:
          type: integer
          minimum: 0
        action_code:
          type: integer
        params:
          type: array
          items:
            type: object
    AuthToken:
      type: object
      properties:
        access_token:
          type: string
        token_type: 
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
        scope:
          type: string
        
